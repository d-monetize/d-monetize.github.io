{"version":3,"sources":["pages/HomePage/index.js","pages/CreateSubscriptionPage/index.js","pages/SubscriptionDetailPage/index.js","App.js","serviceWorker.js","reducer/account.js","reducer/web3.js","reducer/index.js","index.js"],"names":["HomePage","props","react_default","a","createElement","CreateSubscriptionPage","SubscriptionDetailPage","App","Container","react_router","path","component","react_toastify","Boolean","window","location","hostname","match","LOAD","UNLOAD","SET","reducer","combineReducers","account","state","arguments","length","undefined","action","type","address","web3","middlewares","thunk","store","createStore","applyMiddleware","apply","ReactDOM","render","react_router_dom","basename","process","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oLAMeA,MAJR,SAAkBC,GACvB,OAAOC,EAAAC,EAAAC,cAAA,oBCGMC,MAJR,SAAgCJ,GACrC,OAAOC,EAAAC,EAAAC,cAAA,mCCGME,MAJR,SAAgCL,GACrC,OAAOC,EAAAC,EAAAC,cAAA,mCC4BMG,MAtBR,SAAaN,GAClB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEC,KAAK,wBACLC,UAAWN,IAEbH,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEC,KAAK,0BACLC,UAAWL,IAEbJ,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOE,UAAWX,MAItBE,EAAAC,EAAAC,cAACQ,EAAA,EAAD,gBCdcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,gGClBAC,EAAO,eACPC,EAAS,iBAaR,ICdDC,EAAM,WAWL,ICFQC,EALCC,YAAgB,CAC9BC,QFFK,WAAqC,IAApBC,EAAoBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAZ,GAAIG,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC1C,OAAQC,EAAOC,MACb,KAAKX,EACH,OAAOU,EAAOE,QAChB,KAAKX,EACH,MAAO,GACT,QACE,OAAOK,IEJXO,KDJK,WAAuC,IAAtBP,EAAsBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAd,KAAMG,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC5C,OAAQC,EAAOC,MACb,KAAKT,EACH,OAAOQ,EAAOG,KAChB,QACE,OAAOP,MEQTQ,EAAc,CAACC,KAKnB,IAAMC,EAAQC,YAAYd,EAASe,IAAeC,WAAf,EAAmBL,IAEtDM,IAASC,OACPrC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAeC,SAAUC,IACvBxC,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAUT,MAAOA,GACfhC,EAAAC,EAAAC,cAACwC,EAAD,QAGJC,SAASC,eAAe,SJqGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f39ea4bb.chunk.js","sourcesContent":["import React from \"react\"\n\nexport function HomePage(props) {\n  return <div>home</div>\n}\n\nexport default HomePage\n","import React from \"react\"\n\nexport function CreateSubscriptionPage(props) {\n  return <div>create subscription</div>\n}\n\nexport default CreateSubscriptionPage\n","import React from \"react\"\n\nexport function SubscriptionDetailPage(props) {\n  return <div>subscription detail</div>\n}\n\nexport default SubscriptionDetailPage\n","import React from \"react\"\nimport { Route, Switch } from \"react-router-dom\"\nimport { ToastContainer } from \"react-toastify\"\nimport \"react-toastify/dist/ReactToastify.css\"\nimport { Container } from \"semantic-ui-react\"\nimport HomePage from \"./pages/HomePage\"\nimport CreateSubscriptionPage from \"./pages/CreateSubscriptionPage\"\nimport SubscriptionDetailPage from \"./pages/SubscriptionDetailPage\"\n\nexport function App(props) {\n  return (\n    <div>\n      <Container>\n        <Switch>\n          <Route\n            path=\"/subscriptions/create\"\n            component={CreateSubscriptionPage}\n          />\n          <Route\n            path=\"/subscriptions/:address\"\n            component={SubscriptionDetailPage}\n          />\n          <Route component={HomePage} />\n        </Switch>\n      </Container>\n\n      <ToastContainer />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const LOAD = \"ACCOUNT/LOAD\"\nconst UNLOAD = \"ACCOUNT/UNLOAD\"\n\nexport function reducer(state = \"\", action) {\n  switch (action.type) {\n    case LOAD:\n      return action.address\n    case UNLOAD:\n      return \"\"\n    default:\n      return state\n  }\n}\n\nexport const actions = {\n  load: address => ({ type: LOAD, address }),\n  unload: () => ({ type: UNLOAD }),\n}\n\nexport const selectors = {\n  isConnected: state => !!state,\n}\n","const SET = \"WEB3/SET\"\n\nexport function reducer(state = null, action) {\n  switch (action.type) {\n    case SET:\n      return action.web3\n    default:\n      return state\n  }\n}\n\nexport const actions = {\n  set: web3 => ({ type: SET, web3 }),\n}\n","import { combineReducers } from \"redux\"\nimport * as account from \"./account\"\nimport * as web3 from \"./web3\"\n\nconst reducer = combineReducers({\n  account: account.reducer,\n  web3: web3.reducer,\n})\n\nexport default reducer\n\nexport const actions = {\n  account: account.actions,\n  web3: web3.actions,\n}\n\nexport const selectors = {\n  account: {\n    isConnected: state => account.selectors.isConnected(state.account),\n  },\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"semantic-ui-css/semantic.min.css\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport { BrowserRouter } from \"react-router-dom\"\nimport * as serviceWorker from \"./serviceWorker\"\n\n// redux\nimport { applyMiddleware, createStore } from \"redux\"\nimport { Provider } from \"react-redux\"\nimport logger from \"redux-logger\"\nimport thunk from \"redux-thunk\"\nimport reducer from \"./reducer\"\n\nlet middlewares = [thunk]\nif (process.env.NODE_ENV === \"development\") {\n  middlewares.push(logger)\n}\n\nconst store = createStore(reducer, applyMiddleware(...middlewares))\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}